{"version":3,"sources":["../../src/contants.ts","../../src/theme.ts","../../src/util.tsx","../../src/shape/node.tsx","../../src/shape/ringEdge.tsx","../../src/shape/edge.tsx","../../src/shape/groupNode.tsx","../../src/index.tsx","App.tsx","Col.tsx","index.tsx"],"names":["isGroup","Symbol","_theme","nodeWidth","nodeHeight","halfNodeWidth","halfNodeHeight","nodeBorderRadio","primaryColor","primaryColumnColor","primaryBorder","primaryBg","primaryBorderRadio","secondaryColor","secondaryColumnColor","secondaryBg","secondaryBorder","secondaryBorderRadio","disableColor","disableColumnColor","disableBg","disableBorder","disableBorderRadio","activeColor","activeColumnColor","activeBg","activeBorder","activeBorderRadio","searchBg","searchColor","groupBorder","groupBg","groupColor","edgeColor","edgeWidth","disableedgeColor","activeNodeColor","fontFamily","nodeDot","hive","clickhouse","mysql","kafka","hdfs","druid","abase","tableau","abtest","redis","undefined","getTheme","key","canvas","document","createElement","width","height","style","display","body","appendChild","ctx","getContext","font","measureText","text","formatText","label","color","searchKey","labels","x","split","forEach","item","index","push","fontSize","fill","slice","length","fittingString","str","maxWidth","fontWidth","len","textWidths","i","charCodeAt","calcStrLen","splitLength","Math","floor","substring","lineGenerator","line","d","y","getPathData","points","curve","curveBasis","map","DagNode","type","node","onContextMenu","onClick","onHover","onOutHover","nodeOnHover","useRef","onMouseEnter","useCallback","current","onMouseLeave","e","cornerRadius","stroke","$state$","strokeWidth","columns","col","$columnMap$","id","dbType","RingEdge","startPoint","endPoint","direction","ctp1","ctp2","data","offsetY","offsetX","rotation","DagEdge","startNode","endNode","edge","useMemo","startCol","endCol","getPoints","JSON","stringify","pts","angle","atan2","PI","pointerWidth","pointerLength","bezier","DagGroupNode","groupBy","dash","Dag","props","state","dimensions","graph","stage","React","layer","getStage","fitView","getClientRect","skipTransform","stageWidth","stageHeight","radio","min","scale","mousePointTo","position","batchDraw","onWheel","evt","preventDefault","oldScale","scaleX","getPointerPosition","newScale","deltaY","newPos","setGraph","nodes","edges","activeNode","primaryNode","this","graphlib","Graph","directed","multigraph","compound","rankdir","edgesep","setDefaultEdgeLabel","l","setNode","start","end","columnId","setEdge","res","_","Object","keys","groupId","setParent","layout","selectColId","nextProps","nextState","prevProps","prevState","bounds","onResize","contentRect","setState","measureRef","ref","className","dragBoundFunc","pos","draggable","v","onNodeContextMenu","onNodeClick","w","name","defaultProps","App","ReactDOM","render","window","location","pathname","includes","Col","getElementById"],"mappings":"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","file":"static/js/main.92240971.chunk.js","sourcesContent":["export const isGroup: unique symbol = Symbol('isGroup');\n","let _theme = {\n  nodeWidth: 158,\n  nodeHeight: 28,\n  halfNodeWidth: 79,\n  halfNodeHeight: 14,\n  nodeBorderRadio: [2, 2, 2, 2],\n  primaryColor: '#ffffff',\n  primaryColumnColor: '#606a78',\n  primaryBorder: '#4660ef',\n  primaryBg: '#4660ef',\n  primaryBorderRadio: [2, 2, 2, 2],\n  secondaryColor: '#282f38',\n  secondaryColumnColor: '#606a78',\n  secondaryBg: '#ffffff',\n  secondaryBorder: '#8b9dff',\n  secondaryBorderRadio: [2, 2, 2, 2],\n  disableColor: '#ffffff',\n  disableColumnColor: '#939aa3',\n  disableBg: '#c3c8cd',\n  disableBorder: '#f5f6fa',\n  disableBorderRadio: [2, 2, 2, 2],\n  activeColor: '#416eff',\n  activeColumnColor: '#416eff',\n  activeBg: '#ffffff',\n  activeBorder: '#8b9dff',\n  activeBorderRadio: [2, 2, 2, 2],\n  searchBg: '#ffe95b',\n  searchColor: '#282f38',\n  groupBorder: '#4660ef',\n  groupBg: '#4660ef',\n  groupColor: '#ffffff',\n  edgeColor: '#a8b6c7',\n  edgeWidth: 1.5,\n  disableedgeColor: '#d5dadf',\n  activeNodeColor: '#416eff',\n  fontFamily: 'Ubuntu Mono, Tahoma',\n  nodeDot: {\n    hive: '#33d6cc',\n    clickhouse: '#f5f6fa',\n    mysql: '#8a77ed',\n    kafka: '#34adf0',\n    hdfs: '#5dcd81',\n    druid: '#ed55b0',\n    abase: '#33d6cc',\n    tableau: '#ffbc0a',\n    abtest: '#8a77ed',\n    redis: '#34adf0',\n    undefined: '#f25c61',\n  },\n};\n\nexport type themeType<T> = {\n  [key in keyof T]?: T[key];\n};\n\nexport const mergeTheme = (theme: themeType<typeof _theme>) => {\n  _theme = Object.assign(_theme, theme);\n};\n\nexport const getTheme = (key?: string) => {\n  if (key) {\n    return _theme[key];\n  }\n  return _theme;\n};\n","import React from 'react';\nimport { Label, Tag, Text } from 'react-konva';\nimport { curveBasis, line } from 'd3-shape';\nimport { getTheme } from './theme';\n\nconst canvas = document.createElement('canvas');\ncanvas.width = 300;\ncanvas.height = 300;\ncanvas.style.display = 'none';\ndocument.body.appendChild(canvas);\nconst ctx = canvas.getContext('2d');\nctx!.font = '12px Arial';\n\nexport const measureText = function (text: string) {\n  return ctx!.measureText(text).width;\n};\n\nexport const formatText = function (label: any, color: string, searchKey?: string) {\n  const { searchBg, searchColor, fontFamily } = getTheme();\n  if (!searchKey) {\n    return <Text text={`${label}`} fontSize={12} fill={color} fontFamily={fontFamily} />;\n  } else {\n    const labels: any[] = [];\n    let x = 0;\n    label.split(searchKey).forEach((item: string, index: number) => {\n      labels.push(\n        <Text\n          x={x}\n          key={`${index}-1`}\n          text={item}\n          fontSize={12}\n          fill={color}\n          fontFamily={fontFamily}\n        />\n      );\n      x += measureText(item);\n      labels.push(\n        <Label x={x} key={`${index}-2`}>\n          <Tag fill={searchBg} />\n          <Text fontSize={12} fill={searchColor} text={searchKey} fontFamily={fontFamily} />\n        </Label>\n      );\n      x += measureText(searchKey);\n    });\n    return labels.slice(0, labels.length - 1);\n  }\n};\n\n/**\n * 计算字符串的长度\n * @param {string} str 指定的字符串\n */\nexport const calcStrLen = function calcStrLen(str: string) {\n  let len = 0,\n    textWidths = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 0 && str.charCodeAt(i) < 128) {\n      len++;\n      textWidths.push(1);\n    } else {\n      textWidths.push(2);\n      len += 2;\n    }\n  }\n  return { len, textWidths };\n};\n\n/**\n * 计算显示的字符串\n * @param {string} str 要裁剪的字符串\n * @param {number} maxWidth 最大宽度\n * @param {number} fontSize 字体大小\n */\nexport const fittingString = function fittingString(\n  str: string,\n  maxWidth: number,\n  fontSize: number\n) {\n  const fontWidth = fontSize * 1.3; //字号+边距\n  maxWidth = maxWidth * 2; // 需要根据自己项目调整\n  const { len, textWidths } = calcStrLen(str);\n  const width = len * fontWidth;\n  const ellipsis = '…';\n  if (width > maxWidth) {\n    let splitLength = Math.floor((width - maxWidth) / fontWidth),\n      i = textWidths.length - 1;\n    for (; i >= 0; i--) {\n      const item = textWidths[i];\n      splitLength -= item;\n      if (splitLength < 0) {\n        break;\n      }\n    }\n    // var actualLen = Math.floor((maxWidth - 20) / fontWidth)\n    var result = str.substring(0, i) + ellipsis;\n    return result;\n  }\n  return str;\n};\n\nexport const lineGenerator = line()\n  .x(function (d) {\n    return d[0];\n  })\n  .y(function (d) {\n    return d[1];\n  });\n\nexport function getPathData(points: { x: number; y: number }[]): string {\n  // TODO 加缓存？\n  const data = lineGenerator.curve(curveBasis)(points.map((item) => [item.x, item.y]));\n  // console.log(data)\n  return data!;\n}\n\nexport function pathDataToPoints(data: string) {\n  return data\n    .split(/(?=[LMC])/)\n    .map((item) => item.slice(1).split(',').map(Number))\n    .flat();\n}\n","import React, { useCallback, useRef } from 'react';\nimport { Group, Rect } from 'react-konva';\nimport { Node as DNode } from 'dagre';\nimport { getTheme } from '../theme';\nimport { Node, onNodeHover, onNodeClick, onNodeContextMenu, onNodeOutHover } from '../types';\nimport { fittingString, formatText } from '../util';\n\nexport const DagNode: React.FC<{\n  node: DNode<Node>;\n  onClick?: onNodeClick;\n  onContextMenu?: onNodeContextMenu;\n  onHover?: onNodeHover;\n  onOutHover?: onNodeOutHover;\n  activeNode?: Node;\n  searchKey?: string;\n  type: string;\n}> = ({ type, node, onContextMenu, onClick, onHover, onOutHover, searchKey }) => {\n  const nodeOnHover = useRef(false);\n  const onMouseEnter = onHover\n    ? useCallback(() => {\n        if (!nodeOnHover.current) {\n          onHover && onHover(node);\n        }\n        nodeOnHover.current = true;\n      }, [])\n    : undefined;\n  const onMouseLeave = onOutHover\n    ? useCallback(() => {\n        if (nodeOnHover.current) {\n          onOutHover && onOutHover(node);\n        }\n        nodeOnHover.current = false;\n      }, [])\n    : undefined;\n  const { nodeWidth } = getTheme();\n  return (\n    <Group\n      x={node.x - node.width / 2}\n      y={node.y - node.height / 2}\n      onClick={(e) => {\n        onClick && onClick(e, node);\n      }}\n      onContextMenu={(e) => {\n        onContextMenu && onContextMenu(e, node);\n      }}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {type === 'column' && (\n        <>\n          <Rect\n            cornerRadius={getTheme().nodeBorderRadio}\n            fill={'#FFFFFF'}\n            stroke={getTheme(`${node.$state$}Border`)}\n            strokeWidth={1.5}\n            width={node.width}\n            height={getTheme().nodeHeight * ((node.columns?.length || 0) + 1)}\n          />\n          {node.columns?.map((col, index) => {\n            if (!node.$columnMap$) {\n              node.$columnMap$ = {};\n            }\n            node.$columnMap$[col.id] = { ...col, index: index + 1 };\n            return (\n              <Group\n                key={col.id}\n                x={18}\n                y={getTheme().nodeHeight * (index + 1) + getTheme().halfNodeHeight - 6}\n              >\n                {formatText(\n                  fittingString(col.label, nodeWidth - 20, 12),\n                  getTheme(`${col.$state$ || node.$state$}ColumnColor`),\n                  searchKey\n                )}\n              </Group>\n            );\n          })}\n        </>\n      )}\n      <Rect\n        cornerRadius={getTheme().nodeBorderRadio}\n        fill={getTheme(`${node.$state$}Bg`)}\n        stroke={getTheme(`${node.$state$}Border`)}\n        strokeWidth={1.5}\n        width={node.width}\n        height={getTheme().nodeHeight}\n      />\n      <Rect\n        fill={getTheme().nodeDot[node.dbType]}\n        cornerRadius={[1, 1, 1, 1]}\n        width={6}\n        height={6}\n        x={8}\n        y={getTheme().halfNodeHeight - 3}\n      />\n      <Group x={18} y={getTheme().halfNodeHeight - 6}>\n        {formatText(\n          fittingString(node.label, nodeWidth - 20, 12),\n          getTheme(`${node.$state$}Color`),\n          searchKey\n        )}\n      </Group>\n    </Group>\n  );\n};\n","import { Group, Path } from 'react-konva';\nimport React from 'react';\nimport { Point } from '../types';\nimport { getTheme } from '../theme';\n\nexport const RingEdge: React.FC<{\n  startPoint: Point;\n  endPoint: Point;\n  direction: string;\n  edgeColor?: string;\n}> = function ({ startPoint, endPoint, direction, edgeColor }) {\n  // 控制点\n  let ctp1 = '',\n    ctp2 = '';\n  if (direction === 'top') {\n    ctp1 = `${startPoint.x - 80} ${startPoint.y - 40}`;\n    ctp2 = `${startPoint.x + 80} ${startPoint.y - 40}`;\n  } else if (direction === 'bottom') {\n    ctp1 = `${startPoint.x - 80} ${startPoint.y + 40}`;\n    ctp2 = `${startPoint.x + 80} ${startPoint.y + 40}`;\n  } else if (direction === 'right') {\n    ctp1 = `${startPoint.x + 40} ${startPoint.y + 80}`;\n    ctp2 = `${endPoint.x + 40} ${endPoint.y - 80}`;\n  } else {\n    ctp1 = `${startPoint.x - 40} ${startPoint.y + 80}`;\n    ctp2 = `${endPoint.x + 40} ${endPoint.y - 80}`;\n  }\n  const { edgeWidth } = getTheme();\n  return (\n    <Group>\n      <Path\n        data={`M${startPoint.x} ${startPoint.y} C${ctp1} ${ctp2} ${endPoint.x} ${endPoint.y}`}\n        stroke={edgeColor}\n        strokeWidth={edgeWidth}\n      />\n      <Group x={startPoint.x} y={startPoint.y}>\n        <Path\n          offsetY={0}\n          offsetX={0}\n          rotation={-30}\n          fill={edgeColor}\n          data={`M 0 0 L -5 -2.5 L -5 2.5 Z`}\n        />\n      </Group>\n    </Group>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Group, Path, Arrow } from 'react-konva';\nimport { GraphEdge, Node as DNode } from 'dagre';\nimport { getTheme } from '../theme';\nimport { Node } from '../types';\nimport { getPathData } from '../util';\nimport { RingEdge } from './ringEdge';\n\nfunction getPoints(startNode: DNode<Node>, endNode: DNode<Node>, edge: GraphEdge, type: string) {\n  if (type === 'column') {\n    // 先遍历的边，所有边上都会新增一个 $columnMap$ 属性做col的 map\n    //   start: '1',\n    //   end: '5',\n    //   startCol: '2',\n    //   endCol: '1',\n    const startCol = startNode.$columnMap$[edge.startCol],\n      endCol = endNode.$columnMap$[edge.endCol];\n    const { nodeHeight } = getTheme();\n    return [\n      {\n        x: startNode.x + startNode.width / 2,\n        y: startNode.y - startNode.height / 2 + nodeHeight * (startCol.index + 0.5),\n      },\n      ...edge.points.slice(1, -1),\n      {\n        x: endNode.x - endNode.width / 2,\n        y: endNode.y - endNode.height / 2 + nodeHeight * (endCol.index + 0.5),\n      },\n    ];\n  }\n  return [\n    { x: startNode.x + startNode.width / 2, y: startNode.y },\n    ...edge.points.slice(1, -1),\n    { x: endNode.x - endNode.width / 2, y: endNode.y },\n  ];\n}\n\nexport const DagEdge: React.FC<{\n  startNode: DNode<Node>;\n  endNode: DNode<Node>;\n  edge: GraphEdge;\n  type: string;\n  activeNode?: Node;\n}> = ({ startNode, endNode, edge, type }) => {\n  const edgeColor = getTheme(`${edge.$state$}edgeColor`);\n  // console.log('edge xxx', startNode, endNode, edge);\n  // 自包含环形边\n  if (startNode.id === endNode.id) {\n    const startPoint = {\n      x: startNode.x,\n      y: startNode.y + startNode.height / 2,\n    };\n    return (\n      <RingEdge\n        edgeColor={edgeColor}\n        direction={'bottom'}\n        startPoint={startPoint}\n        endPoint={startPoint}\n      />\n    );\n  }\n  const points = useMemo(() => getPoints(startNode, endNode, edge, type), [\n    startNode.y,\n    startNode.x,\n    endNode.x,\n    endNode.y,\n    JSON.stringify(edge.points),\n    type,\n  ]);\n  const startPoint = points[0],\n    endPoint = points[edge.points.length - 1],\n    pts =\n      points.length <= 4\n        ? { x: (startPoint.x + endPoint.x) / 2, y: endPoint.y }\n        : points[edge.points.length - 2];\n  const { edgeWidth } = getTheme();\n  // const pathData =\n  //   points.length <= 4\n  //     ? `M ${startPoint.x} ${startPoint.y}\n  // C ${(startPoint.x + endPoint.x) / 2} ${startPoint.y},\n  //   ${pts.x} ${pts.y},\n  //   ${endPoint.x} ${endPoint.y}`\n  //     : getPathData(points);\n  const angle = useMemo(() => {\n    const radina = Math.atan2(endPoint.y - pts.y, endPoint.x - pts.x);\n    const angle = (radina * 180) / Math.PI;\n    return angle;\n  }, [endPoint.x, endPoint.y, pts.y, pts.x]);\n  // console.log('angle', angle, startNode, endNode, pts, endPoint);\n  return (\n    <>\n      {points.length <= 4 ? (\n        <Arrow\n          points={[\n            startPoint.x,\n            startPoint.y,\n            (startPoint.x + endPoint.x) / 2,\n            startPoint.y,\n            pts.x,\n            pts.y,\n            endPoint.x,\n            endPoint.y,\n          ]}\n          pointerWidth={3}\n          pointerLength={3}\n          bezier={true}\n          stroke={edgeColor}\n          strokeWidth={1.5}\n        />\n      ) : (\n        <>\n          <Path data={getPathData(points)} stroke={edgeColor} strokeWidth={edgeWidth} />\n          <Group x={endPoint.x} y={endPoint.y}>\n            <Path\n              rotation={angle}\n              data={'M 0 0 L -5 -2.5 L -5 2.5 z'}\n              fill={edgeColor}\n              strokeWidth={edgeWidth}\n            />\n          </Group>\n        </>\n      )}\n      {/*<Line points={points.map((item) => [item.x, item.y]).flat()} stroke={'red'} strokeWidth={2} />*/}\n      {/*<Path data={pathData} stroke={edgeColor} strokeWidth={edgeWidth} />*/}\n      {/*<Group x={endPoint.x} y={endPoint.y}>*/}\n      {/*  <Path*/}\n      {/*    rotation={-angle}*/}\n      {/*    data={'M 0 0 L -5 -2.5 L -5 2.5 z'}*/}\n      {/*    fill={edgeColor}*/}\n      {/*    strokeWidth={edgeWidth}*/}\n      {/*  />*/}\n      {/*</Group>*/}\n    </>\n  );\n};\n","import React from 'react';\nimport { Group, Rect, Text } from 'react-konva';\nimport { Node as DNode } from 'dagre';\nimport { getTheme } from '../theme';\nimport { GroupBy, Node } from '../types';\nimport { measureText } from '../util';\n\nexport const DagGroupNode: React.FC<{ node: DNode<Node>; groupBy: GroupBy }> = ({\n  node,\n  groupBy,\n}) => {\n  // console.log('node',node)\n  const text = `${groupBy.label}: ${node[groupBy.key]}`;\n  return (\n    <Group x={node.x - node.width / 2} y={node.y - node.height / 2}>\n      <Group x={0} y={-27}>\n        <Rect\n          cornerRadius={[2, 2, 2, 2]}\n          height={28}\n          width={measureText(text) + 8}\n          fill={getTheme().groupBg}\n        />\n        <Text text={text} fill={getTheme().groupColor} y={8} x={4} />\n      </Group>\n      <Rect\n        dash={[4, 4]}\n        stroke={getTheme().groupBorder}\n        strokeWidth={1.5}\n        width={node.width}\n        height={node.height}\n      />\n    </Group>\n  );\n};\n","import './styles.css';\nimport Measure from 'react-measure';\nimport * as React from 'react';\nimport { Stage, Layer } from 'react-konva';\nimport { graphlib, layout } from 'dagre';\nimport Konva from 'konva';\nimport _ from 'lodash';\nimport { isGroup } from './contants';\nimport {\n  Edge,\n  GroupBy,\n  Node,\n  onNodeClick,\n  onNodeContextMenu,\n  onNodeHover,\n  onNodeOutHover,\n} from './types';\nimport { DagNode } from './shape/node';\nimport { DagEdge } from './shape/edge';\nimport { DagGroupNode } from './shape/groupNode';\nimport { getTheme } from './theme';\n\ntype Props = {\n  edges: Edge[];\n  nodes: Node[];\n  type?: 'column' | 'default';\n  activeNode?: { id: string; columnId?: string };\n  primaryNode?: { id: string };\n  groupBy?: GroupBy;\n  onNodeClick?: onNodeClick;\n  onNodeContextMenu?: onNodeContextMenu;\n  onNodeHover?: onNodeHover;\n  onNodeOutHover?: onNodeOutHover;\n  searchKey?: string;\n};\n\ntype State = {\n  dimensions: {\n    width: number;\n    height: number;\n  };\n};\n\nexport default class Dag extends React.Component<Props, State> {\n  state = {\n    dimensions: {\n      width: 0,\n      height: 0,\n    },\n  };\n\n  static defaultProps = {\n    type: 'default',\n  };\n\n  graph: graphlib.Graph<Node>;\n\n  stage = React.createRef<Stage>();\n  layer = React.createRef<Konva.Layer>();\n\n  constructor(props: Props) {\n    super(props);\n    this.setGraph(props);\n  }\n\n  setGraph({ nodes, edges, type, groupBy, activeNode, primaryNode }: Props) {\n    this.graph = new graphlib.Graph<Node>({\n      directed: true,\n      multigraph: true,\n      compound: !!groupBy,\n    });\n    this.graph\n      .setGraph({\n        rankdir: 'LR',\n        edgesep: 40,\n      })\n      .setDefaultEdgeLabel(function () {\n        return {};\n      });\n    let $state$ = activeNode ? 'disable' : 'secondary';\n    const { nodeHeight, nodeWidth } = getTheme();\n    nodes.forEach((node) => {\n      const l = type === 'column' && node.columns?.length ? node.columns?.length + 1 : 1;\n      this.setNode(\n        {\n          label: node.id,\n          width: nodeWidth,\n          height: nodeHeight * l,\n          $state$,\n          ...node,\n        },\n        $state$,\n        type,\n        primaryNode\n      );\n    });\n    edges.forEach((edge: Edge, index) => {\n      if (activeNode) {\n        if (edge.start === activeNode.id || edge.end === activeNode.id) {\n          if (\n            (type === 'column' &&\n              ((edge.start === activeNode.id && edge.startCol === activeNode.columnId) ||\n                (edge.end === activeNode.id && edge.endCol === activeNode.columnId))) ||\n            type !== 'column'\n          ) {\n            $state$ = 'active';\n            const startNode = this.graph.node(edge.start);\n            const endNode = this.graph.node(edge.end);\n            this.setNode(startNode, $state$, type, primaryNode, edge.start);\n            this.setNode(endNode, $state$, type, primaryNode, edge.end);\n            this.graph.setEdge(edge.start, edge.end, { ...edge, $state$: '' }, `${index}`);\n            return;\n          }\n        }\n        this.graph.setEdge(edge.start, edge.end, { ...edge, $state$: 'disable' }, `${index}`);\n      } else {\n        this.graph.setEdge(edge.start, edge.end, { ...edge, $state$: '' }, `${index}`);\n      }\n    });\n    if (groupBy) {\n      const res = _.groupBy(nodes, groupBy.key);\n      Object.keys(res).forEach((key) => {\n        const groupId = `$group_${key}$`;\n        this.graph.setNode(groupId, {\n          label: key,\n          [groupBy.key]: key,\n          [isGroup]: true,\n        });\n        res[key].forEach((node) => {\n          this.graph.setParent(node.id, groupId);\n        });\n      });\n    }\n    layout(this.graph);\n  }\n\n  setNode(\n    node: Node,\n    $state$: string,\n    type?: string,\n    primaryNode?: { id: string },\n    selectColId?: string\n  ) {\n    type === 'column' &&\n      node.columns?.forEach((col) => {\n        if (col.id == selectColId) {\n          col.$state$ = $state$;\n        }\n      });\n    if (primaryNode?.id && primaryNode?.id == node.id) {\n      this.graph.setNode(node.id, { ...node, $state$: 'primary' });\n    } else {\n      this.graph.setNode(node.id, {\n        ...node,\n        $state$: type === 'column' && $state$ === 'active' ? 'secondary' : $state$,\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<Props>, nextState: Readonly<State>) {\n    if (this.props === nextProps && this.state === nextState) {\n      return false;\n    }\n    if (this.props.nodes !== nextProps.nodes || this.props.edges !== nextProps.edges) {\n      this.setGraph(nextProps);\n    }\n    return true;\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>) {\n    if (\n      prevState.dimensions !== this.state.dimensions ||\n      this.props.nodes !== prevProps.nodes ||\n      this.props.edges !== prevProps.edges\n    ) {\n      this.fitView();\n    }\n  }\n\n  getStage = () => {\n    return this.stage.current!.getStage();\n  };\n\n  fitView = () => {\n    const stage = this.getStage();\n    const { width, height } = this.state.dimensions;\n    const { width: stageWidth, height: stageHeight } = stage.getClientRect({\n      skipTransform: true,\n    });\n    const radio = Math.min(width / stageWidth, height / stageHeight) - 0.15;\n    if (radio < 1) {\n      stage.getStage().scale({ x: radio, y: radio });\n      const mousePointTo = {\n        x: width / 2 - (stageWidth * radio) / 2,\n        y: height / 2 - (stageHeight * radio) / 2,\n      };\n      stage.position(mousePointTo);\n    } else {\n      const mousePointTo = {\n        x: width / 2 - stageWidth / 2,\n        y: height / 2 - stageHeight / 2,\n      };\n      stage.position(mousePointTo);\n    }\n    stage.batchDraw();\n  };\n\n  onWheel = (e: Konva.KonvaEventObject<WheelEvent>) => {\n    e.evt.preventDefault();\n    const scaleBy = 0.96;\n    const stage = this.stage.current!.getStage();\n    const oldScale = stage.scaleX();\n    const mousePointTo = {\n      x: stage.getPointerPosition()!.x / oldScale - stage.x() / oldScale,\n      y: stage.getPointerPosition()!.y / oldScale - stage.y() / oldScale,\n    };\n    const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n    if (e.evt.deltaY > 0 && newScale < 0.1) {\n      return;\n    }\n    stage.scale({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: -(mousePointTo.x - stage.getPointerPosition()!.x / newScale) * newScale,\n      y: -(mousePointTo.y - stage.getPointerPosition()!.y / newScale) * newScale,\n    };\n    stage.position(newPos);\n    stage.batchDraw();\n  };\n\n  scale = (scale: number) => {\n    const stage = this.getStage();\n    if (scale < 0.1) {\n      return;\n    }\n    stage.getStage().scale({ x: scale, y: scale });\n    stage.batchDraw();\n  };\n\n  render() {\n    const { dimensions } = this.state;\n    return (\n      <Measure\n        bounds\n        onResize={(contentRect) => {\n          this.setState({\n            dimensions: contentRect.bounds || { width: 0, height: 0 },\n          });\n        }}\n      >\n        {({ measureRef }) => (\n          <div ref={measureRef} className=\"dag-container\">\n            <Stage\n              ref={this.stage}\n              onWheel={this.onWheel}\n              width={dimensions.width}\n              height={dimensions.height}\n              dragBoundFunc={function (pos) {\n                return {\n                  x: pos.x,\n                  y: pos.y,\n                };\n              }}\n              draggable\n            >\n              <Layer ref={this.layer}>\n                {/*先遍历node，这样才能提前索引 column*/}\n                {this.graph.nodes().map((v) => {\n                  const node = this.graph.node(v);\n                  // @ts-ignore\n                  if (node[isGroup]) {\n                    return <DagGroupNode key={v} node={node} groupBy={this.props.groupBy!} />;\n                  }\n                  return (\n                    <DagNode\n                      key={v}\n                      type={this.props.type!}\n                      node={node}\n                      onContextMenu={this.props.onNodeContextMenu}\n                      onClick={this.props.onNodeClick}\n                      activeNode={this.props.activeNode}\n                      searchKey={this.props.searchKey}\n                    />\n                  );\n                })}\n                {this.graph.edges().map((e) => {\n                  const edge = this.graph.edge(e);\n                  const startNode = this.graph.node(e.v);\n                  const endNode = this.graph.node(e.w);\n                  return (\n                    <DagEdge\n                      key={e.v + e.w + e.name}\n                      type={this.props.type!}\n                      startNode={startNode}\n                      endNode={endNode}\n                      edge={edge}\n                      activeNode={this.props.activeNode}\n                    />\n                  );\n                })}\n              </Layer>\n            </Stage>\n          </div>\n        )}\n      </Measure>\n    );\n  }\n}\n","import React from 'react';\nimport Dag from '@library';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dag\n        edges={[\n          {\n            start: '1',\n            end: '2',\n          },\n          {\n            start: '2',\n            end: '3',\n          },\n          {\n            start: '3',\n            end: '3',\n          },\n          {\n            start: '1',\n            end: '5',\n          },\n          {\n            start: '1',\n            end: '5',\n          },\n          {\n            start: '3',\n            end: '5',\n          },\n          {\n            start: '3',\n            end: '4',\n          },\n        ]}\n        nodes={[\n          {\n            id: '1',\n            name: '1',\n            label: '1',\n          },\n          { id: '2', name: '1', label: '2' },\n          { id: '3', name: '2', label: '3' },\n          { id: '4', name: '2', label: '4' },\n          { id: '5', name: '1', label: '5' },\n        ]}\n        groupBy={{\n          key: 'name',\n          label: '负责人',\n        }}\n        activeNode={{ id: '2' }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport Dag from '@library';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dag\n        edges={[\n          {\n            start: '1',\n            end: '2',\n            startCol: '1',\n            endCol: '2',\n          },\n          {\n            start: '2',\n            end: '3',\n            startCol: '1',\n            endCol: '2',\n          },\n          {\n            start: '3',\n            end: '3',\n            startCol: '1',\n            endCol: '2',\n          },\n          {\n            start: '1',\n            end: '5',\n            startCol: '1',\n            endCol: '2',\n          },\n          {\n            start: '1',\n            end: '5',\n            startCol: '2',\n            endCol: '1',\n          },\n          {\n            start: '3',\n            end: '5',\n            startCol: '1',\n            endCol: '2',\n          },\n          {\n            start: '3',\n            end: '4',\n            startCol: '1',\n            endCol: '2',\n          },\n        ]}\n        nodes={[\n          {\n            id: '1',\n            name: '1',\n            label: 'moring',\n            columns: [\n              { id: '1', label: 'nihao' },\n              { id: '2', label: 'moring' },\n            ],\n          },\n          {\n            id: '2',\n            name: '1',\n            label: 'nihao',\n            columns: [\n              { id: '1', label: 'nihao' },\n              { id: '2', label: 'moring' },\n              { id: '3', label: 'hello' },\n            ],\n          },\n          {\n            id: '3',\n            name: '2',\n            label: 'hello',\n            columns: [\n              { id: '1', label: 'hello' },\n              { id: '2', label: '2' },\n            ],\n          },\n          {\n            id: '4',\n            name: '2',\n            label: '42345678909876543245678987654324567890987654345678987654345t6y78',\n            columns: [\n              { id: '1', label: '1' },\n              { id: '2', label: '2' },\n              { id: '3', label: '3' },\n            ],\n          },\n          {\n            id: '5',\n            name: '1',\n            label: '5',\n            columns: [\n              { id: '1', label: '1' },\n              { id: '2', label: '2' },\n              { id: '3', label: '3' },\n            ],\n          },\n        ]}\n        groupBy={{\n          key: 'name',\n          label: '负责人',\n        }}\n        type={'column'}\n        primaryNode={{ id: '2' }}\n        activeNode={{ id: '2', columnId: '2' }}\n        searchKey={\"hello\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Col from './Col';\n\nReactDOM.render(\n  <>{window.location.pathname.includes('col') ? <Col /> : <App />}</>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}